# -*- coding: utf-8 -*-
"""
/***************************************************************************
 imageLoaderDockWidget
                                 A QGIS plugin
 Loads and unloads images.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Drew
        email                : drew.bennett@ptsinternational.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal,QUrl,Qt
from qgis.utils import iface
from qgis.core import Qgis


from .functions.load_frame_data import loadFrameData
from .functions.load_cracking import loadCracking
from .widgets import set_layers_dialog

from PyQt5.QtWidgets import QMenuBar,QFileDialog,QProgressDialog
from PyQt5 import QtGui

#from PyQt5.QtCore import QModelIndex
#from PyQt5.QtCore import QSortFilterProxyModel



from image_loader import test########################
import cProfile


from image_loader import details_tree_model
from image_loader import image

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'image_loader_dockwidget_base.ui'))


class imageLoaderDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):        
        super(imageLoaderDockWidget, self).__init__(parent)
        self.setupUi(self)
        self.layersDialog = set_layers_dialog.setLayersDialog(parent=self)
        self.loadButton.clicked.connect(self.loadDetails)
        self.remakeButton.clicked.connect(self.remake)

        self.initTopMenu()
      
        
        self.model = details_tree_model.detailsTreeModel()
        self.model.fields = self.layersDialog
        
        
        self.runsView.setModel(self.model)
        
        self.runBox.setModel(self.model)
        self.runBox.currentIndexChanged.connect(self.runChange)
 
        self.setFile()

        self.imagesView.setModel(self.model)
        self.imagesView.hideCols()
        self.runChange()

        

    def runChange(self):        
        index = self.runBox.currentIndex()#int
        i = self.model.index(index,self.runBox.modelColumn())
       
        #i = self.proxy.mapFromSource(i)
        if i.isValid():
            self.imagesView.setModel(i.model())
            self.imagesView.setRootIndex(i)
            self.imagesView.hideCols()
        else:
            self.imagesView.setModel(None)


    '''
#QItemSelection selected
    def runChange(self,selected,deselected):
        row = -1
        runCol = details_tree_model.cols.run
       
        for i in selected.indexes():
          
            if i.column()==runCol:               
               if i.row()>row:
                   row = i.row()
        
        index = self.model.index(row,runCol)
        if index.isValid():
            self.imagesView.setModel(self.model)
            self.imagesView.setRootIndex(index)
            self.imagesView.setColumnHidden(details_tree_model.cols.run,True)
        else:
            self.imagesView.setModel(None)
    '''
    
    
    
    #QFileDialog should return existing file or None.
    #handle actual opening
    #set file to '' for new.
    def setFile(self,file='untitled'):
        self.model.clear()
        if file!='untitled':
            self.model.loadFile(file)
        self.runChange()


    def initTopMenu(self):
        topMenu = QMenuBar(self.mainWidget)    
        
        fileMenu = topMenu.addMenu("File")
        newAct = fileMenu.addAction('New')
        newAct.triggered.connect(lambda:self.setFile())
        
        openAct = fileMenu.addAction('Open...')
        openAct.triggered.connect(self.openFile)
        
        saveAsAct = fileMenu.addAction('Save as...')
        saveAsAct.triggered.connect(self.saveAs)
        
        ######################load
        detailsMenu = topMenu.addMenu("Image_details")
        fromFolderAct = detailsMenu.addAction('Find from folder...')
        fromFolderAct.triggered.connect(self.detailsFromFolder)

        layersMenu = topMenu.addMenu("Load layers")
        loadFramesAct = layersMenu.addAction('Load Spatial Frame Data...')
        loadFramesAct.triggered.connect(self.loadFrames)
        
 
        setupMenu = topMenu.addMenu("Setup")
        setLayers = setupMenu.addAction('Set layers and fields...')
        setLayers.triggered.connect(self.layersDialog.exec_)
        
 
        loadCracksAct = layersMenu.addAction('Load Cracking Data...')
        loadCracksAct.triggered.connect(self.loadCracks)        
        
        helpMenu = topMenu.addMenu('Help')
        openHelpAct = helpMenu.addAction('Open help (in your default web browser)')
        openHelpAct.triggered.connect(self.openHelp)        
        self.mainWidget.layout().setMenuBar(topMenu)



    def framesLayer(self):
        return self.layersDialog.framesLayer()

    def idField(self):
        return self.layersDialog.idField()
  
    def runField(self):
        return self.layersDialog.runField()
    

#opens help/index.html in default browser
    def openHelp(self):
        helpPath = os.path.join(os.path.dirname(__file__),'help','help.html')
        helpPath = 'file:///'+os.path.abspath(helpPath)
        QtGui.QDesktopServices.openUrl(QUrl(helpPath))

        

    #remake images where load==True
    def remake(self):
        
        profile = os.path.join(test.testFolder,'remake.prof')
        pr = cProfile.Profile()
        #####
        pr.enable()  
        
        
        points = self.model.fields['gpsPoints']
        field = self.model.fields['mField']
        
        
        if points and field:
            progress = QProgressDialog("Calculating positions...","Cancel", 0, 0)#QObjectwithout parent gets deleted like normal python object
            progress.setMinimumDuration(0)
            progress.setAutoClose(False)
            
            progress.setWindowModality(Qt.WindowModal)
            images = [i for i in self.model.marked()]#image[]
            image.remakeImages(images=images,layer = points,startField=field,progress = progress)
            progress.close()#close immediatly otherwise haunted by ghostly progressbar
            del progress

        pr.disable()
        ##########snakeviz remake.prof
        pr.dump_stats(profile)#compatible with snakeviz
        #almost all time spent in getFeatures. 20s for csv. 5s for geopackage with index.
        #5s for gdal to remake 10 images.


   #QgsTask is very buggy. QProgressDialog much simpler.
    def loadDetails(self):
        progress = QProgressDialog("Loading images...","Cancel", 0, 0)#QObjectwithout parent gets deleted like normal python object
       # progress.setMinimumDuration(0)
        progress.setWindowModality(Qt.WindowModal)
                
        images = [i for i in self.model.marked()]#image[]
        progress.setMaximum(len(images))
        
        for i,im in enumerate(images):
            if progress.wasCanceled():
                return
            im.load()
            progress.setValue(i)
        
        progress.close()#close immediatly otherwise haunted by ghostly progressbar
        del progress


    def loadFrames(self):
        f = QFileDialog.getOpenFileName(caption = 'Load Spatial Frame Data',filter = 'txt (*.txt)')
        if f:
            if f[0]:
                loadFrameData(f[0])



    def loadCracks(self):
        f = QFileDialog.getOpenFileName(caption = 'Load Crack data Data',filter = 'txt (*.txt)')
        if f:
            if f[0]:
                loadCracking(f[0])
                

    #open dialog and load csv/sqlite file
    def openFile(self):
        f = QFileDialog.getOpenFileName(caption = 'open',filter = '*;;*.csv;;*.txt')[0]
        if f:
            self.setFile(f)
                
            
            
    #could save to sqlite database. Would confuse users and no real advantages.
    def saveAs(self):
        f = QFileDialog.getSaveFileName(caption = 'Save details',filter = 'csv (*.csv);;txt (*.txt)')[0]
        if f:
            self.model.save(f)
            iface.messageBar().pushMessage("Image_loader", "Saved to csv", level=Qgis.Info)



    #load all tif files in folder and consider showing progress bar
    def detailsFromFolder(self):
        f = QFileDialog.getExistingDirectory(self,'Folder with images')
        if f:
           # progress = QProgressDialog("Finding image details...","Cancel",0,0,self)
         #   progress.setWindowModality(Qt.WindowModal)
            self.model.addFolder(f)
           # progress.deleteLater()
           
            
    #find extents for list of details. allows cancelling with progressDialog       
    #def findExtents(self,details):
     #   progress = QProgressDialog("finding image extents...","Cancel",0,len(details),self)
    #    progress.setWindowModality(Qt.WindowModal)
   ##     progress.setWindowTitle("finding image extents...")
   #     progress.setMaximum(len(details))
            
    #    for i,d in enumerate(details):
    #        progress.setValue(i)
    # #       if progress.wasCanceled():
    #            break
     #       d.findExtents()
            

            

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
