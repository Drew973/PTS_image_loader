# -*- coding: utf-8 -*-
"""
/***************************************************************************
 imageLoaderDockWidget
                                 A QGIS plugin
 Loads and unloads images.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Drew
        email                : drew.bennett@ptsinternational.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal,QUrl,Qt
from qgis.utils import iface
from qgis.core import Qgis


from .functions.load_frame_data import loadFrameData
from .functions.load_cracking import loadCracking
from .widgets import set_layers_dialog

from PyQt5.QtWidgets import QMenuBar,QFileDialog,QProgressDialog
from PyQt5 import QtGui

from image_loader.details_tree_model import detailsTreeModel


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'image_loader_dockwidget_base.ui'))


class imageLoaderDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):        
        super(imageLoaderDockWidget, self).__init__(parent)
        self.setupUi(self)
        self.layersDialog = set_layers_dialog.setLayersDialog(parent=self)
        self.loadButton.clicked.connect(self.loadDetails)
        self.initTopMenu()
        print(type(self.detailsView))
        self.detailsView.setModel(detailsTreeModel())
        
      
       # self.im().runsModel = m
     #   self.im().setLayers(self.layersDialog)

        self.setFile()


    def im(self):
        return self.detailsView.model()



    #QFileDialog should return existing file or None.
    #handle actual opening
    #set file to '' for new.
    def setFile(self,file='untitled'):
        

        
      #  if self.im() is not None:
        if self.im() is not None:
            self.im().clear()
    
      #      self.setWindowTitle('{file} - Image Loader'.format(file=file))
      #      self.fileName = file
    
        if file!='untitled':
            self.im().loadFile(file)


    def initTopMenu(self):
        topMenu = QMenuBar(self.mainWidget)    
        
        fileMenu = topMenu.addMenu("File")
        newAct = fileMenu.addAction('New')
        newAct.triggered.connect(lambda:self.setFile())
        
        openAct = fileMenu.addAction('Open...')
        openAct.triggered.connect(self.openFile)
        
        saveAsAct = fileMenu.addAction('Save as...')
        saveAsAct.triggered.connect(self.saveAs)
        
        ######################load
        detailsMenu = topMenu.addMenu("Image_details")
        fromFolderAct = detailsMenu.addAction('Find from folder...')
        fromFolderAct.triggered.connect(self.detailsFromFolder)

        layersMenu = topMenu.addMenu("Load layers")
        loadFramesAct = layersMenu.addAction('Load Spatial Frame Data...')
        loadFramesAct.triggered.connect(self.loadFrames)
        
 
        setupMenu = topMenu.addMenu("Setup")
        setLayers = setupMenu.addAction('Set layers and fields...')
        setLayers.triggered.connect(self.layersDialog.exec_)
        
 
        loadCracksAct = layersMenu.addAction('Load Cracking Data...')
        loadCracksAct.triggered.connect(self.loadCracks)        
        
        helpMenu = topMenu.addMenu('Help')
        openHelpAct = helpMenu.addAction('Open help (in your default web browser)')
        openHelpAct.triggered.connect(self.openHelp)        
        self.mainWidget.layout().setMenuBar(topMenu)



    def framesLayer(self):
        return self.layersDialog.framesLayer()

    def idField(self):
        return self.layersDialog.idField()
  
    def runField(self):
        return self.layersDialog.runField()
    

#opens help/index.html in default browser
    def openHelp(self):
        helpPath = os.path.join(os.path.dirname(__file__),'help','help.html')
        helpPath = 'file:///'+os.path.abspath(helpPath)
        QtGui.QDesktopServices.openUrl(QUrl(helpPath))

        

   #QgsTask is very buggy. QProgressDialog much simpler.
    def loadDetails(self):        
        im = self.im()
        if im is not None:
            progress = QProgressDialog("Loading images...","Cancel", 0, 0,self)
           # progress.setMinimumDuration(0)
            progress.setWindowModality(Qt.WindowModal)
            im.loadImages(progress = progress)
            progress.deleteLater()



    def loadFrames(self):
        f = QFileDialog.getOpenFileName(caption = 'Load Spatial Frame Data',filter = 'txt (*.txt)')
        if f:
            if f[0]:
                loadFrameData(f[0])



    def loadCracks(self):
        f = QFileDialog.getOpenFileName(caption = 'Load Crack data Data',filter = 'txt (*.txt)')
        if f:
            if f[0]:
                loadCracking(f[0])
                

    #open dialog and load csv/sqlite file
    def openFile(self):
        f = QFileDialog.getOpenFileName(caption = 'open',filter = '*;;*.csv;;*.txt')[0]
        if f:
            self.setFile(f)
                
            
            
    #could save to sqlite database. Would confuse users and no real advantages.
    def saveAs(self):
        f = QFileDialog.getSaveFileName(caption = 'Save details',filter = 'csv (*.csv);;txt (*.txt)')[0]
        if f:
            self.im().save(f)
            iface.messageBar().pushMessage("Image_loader", "Saved to csv", level=Qgis.Info)



    #load all tif files in folder and consider showing progress bar
    def detailsFromFolder(self):
        f = QFileDialog.getExistingDirectory(self,'Folder with images')
        if f:
           # progress = QProgressDialog("Finding image details...","Cancel",0,0,self)
         #   progress.setWindowModality(Qt.WindowModal)
            self.im().addFolder(f)
           # progress.deleteLater()
           
            
    #find extents for list of details. allows cancelling with progressDialog       
    #def findExtents(self,details):
     #   progress = QProgressDialog("finding image extents...","Cancel",0,len(details),self)
    #    progress.setWindowModality(Qt.WindowModal)
   ##     progress.setWindowTitle("finding image extents...")
   #     progress.setMaximum(len(details))
            
    #    for i,d in enumerate(details):
    #        progress.setValue(i)
    # #       if progress.wasCanceled():
    #            break
     #       d.findExtents()
            

            

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
