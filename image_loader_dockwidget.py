# -*- coding: utf-8 -*-
"""
/***************************************************************************
 imageLoaderDockWidget
                                 A QGIS plugin
 Loads and unloads images.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Drew
        email                : drew.bennett@ptsinternational.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtWidgets import QMenuBar,QFileDialog,QProgressDialog
from PyQt5 import QtGui
from PyQt5.QtSql import QSqlDatabase



from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal,QUrl,Qt

from image_loader.models import image_model_spatialite as im
from image_loader.models import  runs_model

from image_loader.models.details import image_details

from image_loader.functions.load_frame_data import loadFrameData
from image_loader.functions.load_cracking import loadCracking
from image_loader.widgets import set_layers_dialog
from image_loader.functions import group_functions


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'image_loader_dockwidget_base.ui'))

import logging
logger = logging.getLogger(__name__)

class imageLoaderDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        
        logger.debug('__init__')
        super(imageLoaderDockWidget, self).__init__(parent)
        self.setupUi(self)
        self.setFile(":memory:")
        self.loadButton.clicked.connect(self.load)
        self.layersDialog = set_layers_dialog.setLayersDialog(parent=self)
        self.initTopMenu()
        


    def imageModel(self):
        return self.fileDetailsView.model()


    def runsModel(self):
        return self.runsView.runsModel()



    def setFile(self,file):
        db = QSqlDatabase.addDatabase('QSPATIALITE','image_loader')
        db.setDatabaseName(file)
        db.open()
                
        self.setWindowTitle('{file} - Image Loader'.format(file=file))
        im.setup_database.setupDb(db)
        self.fileDetailsView.setModel(im.image_model.imageModel(parent=self,db=db))
        self.imageModel().dbChanged.connect(self.infoChange)
       # runs_model.createTable(db)
     #   proxy = natural_sort.naturalSortFilterProxyModel(self)
      #  proxy.setSourceModel(runs_model.runsModel(parent=self,db=db))
      
        self.runsView.setModel(runs_model.runsModel(parent=self))
        
        
        

    def initTopMenu(self):
        topMenu = QMenuBar(self.mainWidget)    
        
        fileMenu = topMenu.addMenu("File")
        newAct = fileMenu.addAction('New')
        newAct.triggered.connect(lambda:self.setFile(":memory:"))
        
        loadCsvAct = fileMenu.addAction('Load image details from csv/txt...')
        loadCsvAct.triggered.connect(self.loadCsv)
        
        saveCsvAct = fileMenu.addAction('Save to csv...')
        saveCsvAct.triggered.connect(self.saveToCsv)
        
        ######################load
        detailsMenu = topMenu.addMenu("Image_details")
        fromFolderAct = detailsMenu.addAction('Find from folder...')
        fromFolderAct.triggered.connect(self.detailsFromFolder)

        layersMenu = topMenu.addMenu("Load layers")
        loadFramesAct = layersMenu.addAction('Load Spatial Frame Data...')
        loadFramesAct.triggered.connect(self.loadFrames)
        
 
        setupMenu = topMenu.addMenu("Setup")
        setLayers = setupMenu.addAction('Set layers and fields...')
        setLayers.triggered.connect(self.layersDialog.exec_)
        
 
        loadCracksAct = layersMenu.addAction('Load Cracking Data...')
        loadCracksAct.triggered.connect(self.loadCracks)        
        
        helpMenu = topMenu.addMenu('Help')
        openHelpAct = helpMenu.addAction('Open help (in your default web browser)')
        openHelpAct.triggered.connect(self.openHelp)        
        self.mainWidget.layout().setMenuBar(topMenu)



    def framesLayer(self):
        return self.layersDialog.framesLayer()

    def idField(self):
        return self.layersDialog.idField()
  
    def runField(self):
        return self.layersDialog.runField()
    

    def infoChange(self):
        if isinstance(self.runsModel(),runs_model.runsModel):
            self.runsModel().select()


#opens help/index.html in default browser
    def openHelp(self):
        helpPath = os.path.join(os.path.dirname(__file__),'help','help.html')
        helpPath = 'file:///'+os.path.abspath(helpPath)
        QtGui.QDesktopServices.openUrl(QUrl(helpPath))

        
    #load images.
    def load(self):
        self.loadDetails(self.imageModel().getDetails())


    #load iterable of details and maybe display cancellable progress bar.
   #QgsTask is very buggy. QProgressDialog much simpler.
    def loadDetails(self,details):
        
        group_functions.removeChild('image_loader')#remove group
        progress = QProgressDialog("Loading images...","Cancel", 0, len(details),self)
        progress.setWindowModality(Qt.WindowModal)
        
        for i,d in enumerate(details):
            d.load()
            progress.setValue(i+1)
            if progress.wasCanceled():
                break
        progress.deleteLater()


    def loadFrames(self):
        f = QFileDialog.getOpenFileName(caption = 'Load Spatial Frame Data',filter = 'txt (*.txt)')
        if f:
            if f[0]:
                loadFrameData(f[0])



    def loadCracks(self):
        f = QFileDialog.getOpenFileName(caption = 'Load Crack data Data',filter = 'txt (*.txt)')
        if f:
            if f[0]:
                loadCracking(f[0])
                

    #unused
    #load 'raster image load' txt file
    def loadCsv(self):
        logging.debug('loadCsv')
 
        '''
        f = regex_file_dialog.getFileName(
            filterExpression = '.*raster image load.*',
            parent = self,
            caption = 'select Raster Image Load file',
            extensionFilter = "txt (*.txt)",
            caseSensitive = False)
        '''
        
        
        f = QFileDialog.getOpenFileName(caption = 'Load details csv',filter = '*.csv;;*.txt;;*')[0]
        if f:
            if f[0]:
                self.imageModel().clearTable()
                self.addDetails([d for d in image_details.fromCsv(f)])

    
    def saveToCsv(self):
        f = QFileDialog.getSaveFileName(caption = 'Save details to csv',filter = 'csv (*.csv);;txt (*.txt)')[0]
        if f:
            self.imageModel().saveAsCsv(f)



    #load all tif files in folder and consider showing progress bar
    def detailsFromFolder(self):
        logging.debug('detailsFromFolder')
        f = QFileDialog.getExistingDirectory(self,'Folder with images')
        if f:
            self.addDetails([image_details.imageDetails(f) for f in image_details.getFiles(f,['.tif'])],findExtents=True)
            
           
            
    def addDetails(self,details,findExtents=False):
     #  print(details)
        progress = QProgressDialog("Finding image details...","Cancel", 0, len(details),self)
        progress.setWindowModality(Qt.WindowModal)
        for i,d in enumerate(details):
            progress.setValue(i)
            if progress.wasCanceled():
                break
            if findExtents:
                d.findExtents()
            self.imageModel().addDetails([d])        
        self.imageModel().select()
        self.runsModel().select()
        progress.deleteLater()    
            

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
