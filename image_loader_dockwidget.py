# -*- coding: utf-8 -*-
"""
/***************************************************************************
 imageLoaderDockWidget
                                 A QGIS plugin
 Loads and unloads images.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Drew
        email                : drew.bennett@ptsinternational.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtWidgets import QMenuBar,QFileDialog

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal,QUrl,Qt
from PyQt5.QtWidgets import QProgressDialog
    
from PyQt5 import QtGui

from image_loader.image_model import image_model,group_functions
from image_loader import runs_model

from image_loader import exceptions,checkbox_delegate,regex_file_dialog

from PyQt5.QtSql import QSqlDatabase



FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'image_loader_dockwidget_base.ui'))




class imageLoaderDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(imageLoaderDockWidget, self).__init__(parent)
        self.setupUi(self)
        
        dbFile = ":memory:"
        
        db = QSqlDatabase.addDatabase('QSPATIALITE')   #QSqlDatabase
        db.setDatabaseName(dbFile)
        if not db.open():
            raise exceptions.imageLoaderError('could not create database')
        
        image_model.createTable(db)
        self.fileDetailsView.setModel(image_model.imageModel(parent=self,db=db))
        
        
        self.fileDetailsView.setColumnHidden(self.fileDetailsView.model().fieldIndex('pk'),True)
        self.fileDetailsView.setColumnHidden(self.fileDetailsView.model().fieldIndex('geom'),True)

        
        runs_model.createTable(db)
        self.runsView.setModel(runs_model.runsModel(parent=self,db=db))
        self.runsView.setItemDelegateForColumn(self.runsView.model().fieldIndex('show'),checkbox_delegate.checkBoxDelegate())
        
        self.fileDetailsView.model().dbChanged.connect(self.infoChange)
        #self.fileDetailsView.resizeColumnsToContents()


        self.loadButton.clicked.connect(self.load)
        
        #top menu
        topMenu = QMenuBar(self.mainWidget)       

        ######################load
        loadMenu = topMenu.addMenu("File_details")
        
        loadCsvAct = loadMenu.addAction('Load file details from csv/txt...')
        loadCsvAct.triggered.connect(self.loadCsv)
        
      #  loadRilAct = loadMenu.addAction('Load details from raster image load file...')
      #  loadRilAct.triggered.connect(self.loadRil)
        
        fromFolderAct = loadMenu.addAction('Find from folder...')
        fromFolderAct.triggered.connect(self.detailsFromFolder)

        saveCsvAct = loadMenu.addAction('Save to csv...')
        saveCsvAct.triggered.connect(self.saveToCsv)
        
        
        helpMenu = topMenu.addMenu('Help')
        openHelpAct = helpMenu.addAction('Open help (in your default web browser)')
        openHelpAct.triggered.connect(self.openHelp)
        
        
        self.mainWidget.layout().setMenuBar(topMenu)
      


    def infoChange(self):
        self.runsView.model().updateTable()



#opens help/index.html in default browser
    def openHelp(self):
        helpPath = os.path.join(os.path.dirname(__file__),'help','help.html')
        helpPath = 'file:///'+os.path.abspath(helpPath)
        QtGui.QDesktopServices.openUrl(QUrl(helpPath))

        

    #load images.
    #QgsTask is very buggy. QProgressDialog much simpler.
    def load(self):
        group_functions.removeChild('image_loader')#remove group.
        
        details = [d for d in self.fileDetailsView.model().details()]

        progress = QProgressDialog("Loading images...","Cancel", 0, len(details),self)
        progress.setWindowModality(Qt.WindowModal)
        
        for i,d in enumerate(details):
            d.load()
            progress.setValue(i+1)
            
            if progress.wasCanceled():
                break
            
        progress.deleteLater()


    def loadCsv(self):
        f = QFileDialog.getOpenFileName(caption = 'Load details csv',filter = 'csv (*.csv);;txt (*.txt)')
        print(f)
        if f:
            if f[0]:
                self.fileDetailsView.model().clearTable()
                self.fileDetailsView.model().loadCsv(f[0])

    #unused
    #load 'raster image load' txt file
    def loadRil(self):
        
        
    #    d = QFileDialog(self)
     #   d.setNameFilters(['txt (*raster image load*.txt)'])
  #  #    d.exec()
     #   f = d.selectedFiles()
        
       # f = QFileDialog.getOpenFileName(caption = 'Load details csv',filter = 'txt (*raster image load*.txt)')
        f = regex_file_dialog.getFileName(
            filterExpression = '.*raster image load.*',
            parent = self,
            caption = 'select Raster Image Load file',
            extensionFilter = "txt (*.txt)",
            caseSensitive = False)
        
        #f = QFileDialog.getOpenFileName(caption = 'Load details csv',filter = '*.txt;;*')[0]
        if f:
            if f[0]:
                self.fileDetailsView.model().clearTable()
                self.fileDetailsView.model().loadCsv(f[0])
        

    
    def saveToCsv(self):
        f = QFileDialog.getSaveFileName(caption = 'Save details to csv',filter = 'csv (*.csv);;txt (*.txt)')[0]
        if f:
            self.fileDetailsView.model().saveAsCsv(f)


    def detailsFromFolder(self):
        f = QFileDialog.getExistingDirectory(self,'Folder with images')
        if f:
            self.fileDetailsView.model().clearTable()
            self.fileDetailsView.model().fromFolder(f)


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
