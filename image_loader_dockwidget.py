# -*- coding: utf-8 -*-
"""
/***************************************************************************
 imageLoaderDockWidget
                                 A QGIS plugin
 Loads and unloads images.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Drew
        email                : drew.bennett@ptsinternational.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtWidgets import QMenuBar,QFileDialog

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal,QUrl
from PyQt5 import QtGui

from . import image_model
from image_loader import group_functions,constants

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'image_loader_dockwidget_base.ui'))




class imageLoaderDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(imageLoaderDockWidget, self).__init__(parent)
        self.setupUi(self)
        
        self.model = image_model.imageModel()
        self.fileDetailsView.setModel(self.model)
        self.loadButton.clicked.connect(self.load)
        
        #top menu
        topMenu = QMenuBar(self.mainWidget)       

        ######################load
        loadMenu = topMenu.addMenu("File_details")
        loadCsvAct = loadMenu.addAction('Load file details csv...')
        loadCsvAct.triggered.connect(self.loadCsv)
        
        loadCsvAct = loadMenu.addAction('Find from folder...')
        loadCsvAct.triggered.connect(self.detailsFromFolder)

        saveCsvAct = loadMenu.addAction('Save to csv...')
        saveCsvAct.triggered.connect(self.saveToCsv)
        
        
        helpMenu = topMenu.addMenu('Help')  
        openHelpAct = helpMenu.addAction('Open help (in your default web browser)')
        openHelpAct.triggered.connect(self.openHelp)        
        
        
        self.mainWidget.layout().setMenuBar(topMenu)
        self.infoChange()
      

#opens help/index.html in default browser
    def openHelp(self):
        helpPath = os.path.join(os.path.dirname(__file__),'help','help.html')
        helpPath = 'file:///'+os.path.abspath(helpPath)
        QtGui.QDesktopServices.openUrl(QUrl(helpPath))

        
    def load(self):      
        group_functions.removeChild(constants.rootGroup)#remove group.
       # run = self.runBox.currentData()
        
        self.model.loadImages(run=self.runBox.currentData(),startId=self.startBox.value(),endId=self.endBox.value())
        
        
    def loadCsv(self):
        f = QFileDialog.getOpenFileName(caption = 'Load details csv',filter = '*.csv;;*')[0]
        if f:
            self.model.clearTable()
            self.model.loadCsv(f)
        self.infoChange()

    
    def saveToCsv(self):
        f = QFileDialog.getSaveFileName(caption = 'Save details to csv',filter = '*.csv;;*')[0]
        if f:
            self.model.saveAsCsv(f)


    def detailsFromFolder(self):
        f = QFileDialog.getExistingDirectory(self,'Folder with images')
        if f:
            self.model.clearTable()
            self.model.fromFolder(f)
        self.infoChange()

    ##########to do. connect to model.dataChanged? or call in loadCsv?
    def infoChange(self):
        self.runBox.clear()
        self.runBox.addItems(self.model.runs())


        s = self.model.minId()
        e = self.model.maxId()
        
        self.endBox.setMinimum(s)
        self.endBox.setMaximum(e)
        self.startBox.setMinimum(s)
        self.startBox.setMaximum(e)


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
